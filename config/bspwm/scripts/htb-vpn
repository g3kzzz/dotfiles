#!/bin/bash
# =====================================================
#        HTB VPN Manager ‚Äî Validaci√≥n + Supervisi√≥n
#                  (Cyan - Dunst + htb.png)
# =====================================================

SRC_DIR="$HOME/.config/bspwm/scripts/src"
LOGFILE="$HOME/.htb-vpn.log"
ICON_PATH="$HOME/.config/bspwm/scripts/images/htb.png"  # <-- tu imagen
TIMEOUT_INIT=15   # segundos a esperar por "Initialization Sequence Completed"
CYAN="\e[36m"
BOLD="\e[1m"
RESET="\e[0m"

# ---------- helpers ----------
typing() {
  local text="$1"
  for ((i=0; i<${#text}; i++)); do
    echo -ne "${CYAN}${text:$i:1}${RESET}"
    sleep 0.005
  done
  echo
}

dnotify() {
  # Usa dunstify pero pedimos colores/fg/bg como hint (si tu dunst los respeta)
  # argumentos: $1 urgency (low|normal|critical), $2 title, $3 message
  local urg="$1"; shift
  local title="$1"; shift
  local msg="$1"; shift
  dunstify -r 7777 -u "$urg" -t 4500 -h string:x-dunst-stack-tag:htb-vpn -i "$ICON_PATH" "$title" "$msg"
}

# ---------- validaciones de archivo .ovpn ----------
validate_ovpn() {
  local file="$1"

  # existe y es legible
  if [ ! -r "$file" ]; then
    return 1
  fi

  # tama√±o m√≠nimo razonable (ej: > 50 bytes)
  local size
  size=$(stat -c%s "$file" 2>/dev/null || echo 0)
  if [ "$size" -lt 50 ]; then
    return 2
  fi

  # buscar tokens t√≠picos en .ovpn (client|remote|dev|proto)
  local need_count=0
  grep -Eqi '^\s*client\b' "$file" && ((need_count++))
  grep -Eqi '^\s*remote\b' "$file" && ((need_count++))
  grep -Eqi '^\s*dev\b' "$file" && ((need_count++))
  grep -Eqi '^\s*proto\b' "$file" && ((need_count++))

  # requerimos al menos 2 tokens para considerarlo plausiblemente un .ovpn v√°lido
  if [ "$need_count" -lt 2 ]; then
    return 3
  fi

  return 0
}

# ---------- funciones de supervisi√≥n ----------
start_openvpn() {
  local file="$1"
  # limpamos log antiguo de esta sesi√≥n para facilitar parsing
  : > "$LOGFILE"
  # Iniciamos openvpn en daemon y con log al archivo
  # No usamos sudo -n porque puede pedir contrase√±a; dejamos prompt si corresponde
  sudo openvpn --config "$file" --daemon --log "$LOGFILE" 2>>"$LOGFILE"
  return $?
}

wait_for_initialization() {
  local logfile="$1"
  local timeout=${2:-$TIMEOUT_INIT}
  local elapsed=0
  local interval=1

  while [ $elapsed -lt $timeout ]; do
    # si aparece la l√≠nea de √©xito, devolvemos 0
    if grep -q "Initialization Sequence Completed" "$logfile" 2>/dev/null; then
      return 0
    fi
    # si aparece un "Options error" o "ERROR" obvio, fallamos
    if grep -qiE "Options error|ERROR|error|Exiting" "$logfile" 2>/dev/null; then
      return 2
    fi
    # tambi√©n detectamos si tun0 ya existe
    if ip a | grep -q "tun0"; then
      # puede ser que el servicio ya levant√≥ sin la l√≠nea exacta; aceptamos
      return 0
    fi
    sleep $interval
    elapsed=$(( elapsed + interval ))
  done

  # timeout
  return 1
}

# ---------- flujo principal ----------
clear
echo -e "${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${RESET}"
typing "‚ïë         HACK THE BOX VPN MANAGER ‚ö°          ‚ïë"
echo -e "${CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${RESET}"
echo

# validar directorio y archivos
if [ ! -d "$SRC_DIR" ]; then
  echo -e "${CYAN}‚ö† Directorio no encontrado:${RESET} $SRC_DIR"
  dnotify critical "HTB VPN" "Directorio $SRC_DIR no encontrado"
  exit 1
fi

shopt -s nullglob
VPN_FILES=("$SRC_DIR"/*.ovpn)
shopt -u nullglob

if [ ${#VPN_FILES[@]} -eq 0 ]; then
  echo -e "${CYAN}‚ö† No hay archivos .ovpn en:${RESET} $SRC_DIR"
  dnotify critical "HTB VPN" "No se encontraron archivos .ovpn en $SRC_DIR"
  exit 1
fi

# mostrar lista compacta (sin bordes redundantes)
echo -e "${CYAN}üåê Archivos VPN disponibles:${RESET}"
for i in "${!VPN_FILES[@]}"; do
  printf "${CYAN}[%d]${RESET} %s\n" $((i+1)) "$(basename "${VPN_FILES[$i]}")"
done

echo
echo -ne "${CYAN}Seleccione un archivo VPN (n√∫mero): ${RESET}"
read -r selection

if ! [[ "$selection" =~ ^[0-9]+$ ]] || [ "$selection" -lt 1 ] || [ "$selection" -gt ${#VPN_FILES[@]} ]; then
  echo -e "${CYAN}‚úñ Selecci√≥n inv√°lida.${RESET}"
  dnotify critical "HTB VPN" "Selecci√≥n inv√°lida"
  exit 1
fi

VPN_FILE="${VPN_FILES[$((selection-1))]}"
echo -e "${CYAN}‚úî Archivo elegido:${RESET} $(basename "$VPN_FILE")"
echo

# validar contenido plausible del .ovpn
echo -ne "${CYAN}Validando archivo... ${RESET}"
if ! validate_ovpn "$VPN_FILE"; then
  echo -e "${CYAN}‚úñ${RESET}"
  echo -e "${CYAN}‚Üí El archivo no parece un .ovpn v√°lido. Abortando.${RESET}"
  dnotify critical "HTB VPN" "Archivo inv√°lido: $(basename "$VPN_FILE")"
  exit 1
fi
echo -e "${CYAN}‚úî${RESET}"

# iniciar openvpn y supervisar el log
echo -ne "${CYAN}Iniciando OpenVPN${RESET}"
for dot in {1..3}; do echo -ne "${CYAN}.${RESET}"; sleep 0.4; done
echo
start_openvpn "$VPN_FILE"
sleep 1

# esperar a inicializaci√≥n (o error)
wait_for_initialization "$LOGFILE" $TIMEOUT_INIT
case $? in
  0)
    # ok: confirmamos tun0 o mensaje en log y notificamos √©xito
    if ip a | grep -q "tun0"; then
      dnotify normal "HTB VPN" "Conectado: $(basename "$VPN_FILE")"
      echo -e "${CYAN}‚úÖ VPN conectada correctamente.${RESET}"
      exit 0
    else
      # muy raro: init ok pero no tun0; a√∫n as√≠ consideramos √©xito si log tiene la l√≠nea
      if grep -q "Initialization Sequence Completed" "$LOGFILE" 2>/dev/null; then
        dnotify normal "HTB VPN" "Conectado: $(basename "$VPN_FILE")"
        echo -e "${CYAN}‚úÖ VPN conectada (init OK).${RESET}"
        exit 0
      fi
      dnotify critical "HTB VPN" "Conexi√≥n inconclusa"
      echo -e "${CYAN}‚úñ Conexi√≥n no verificada. Revisa $LOGFILE${RESET}"
      exit 1
    fi
    ;;
  1)
    # timeout sin init; consideramos fallo
    dnotify critical "HTB VPN" "Tiempo de conexi√≥n agotado"
    echo -e "${CYAN}‚úñ Timeout: no se complet√≥ la inicializaci√≥n en ${TIMEOUT_INIT}s${RESET}"
    echo -e "${CYAN}‚Üí Revisa $LOGFILE para detalles.${RESET}"
    exit 2
    ;;
  2)
    # error detectado en log
    local err_line
    err_line=$(grep -iE "Options error|ERROR|error|Exiting" "$LOGFILE" 2>/dev/null | head -n1)
    dnotify critical "HTB VPN" "Error al conectar: $(basename "$VPN_FILE")"
    echo -e "${CYAN}‚úñ Error detectado:${RESET} ${err_line:-(revisa $LOGFILE)}"
    exit 3
    ;;
  *)
    dnotify critical "HTB VPN" "Error inesperado"
    echo -e "${CYAN}‚úñ Error inesperado.${RESET}"
    exit 4
    ;;
esac
